{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./RaceResults.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const RaceResults=()=>{const[raceData,setRaceData]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[racesList,setRacesList]=useState([]);const[selectedRound,setSelectedRound]=useState('last');const[fastestLaps,setFastestLaps]=useState([]);const[pitStops,setPitStops]=useState([]);// Fetch all races for selector\nuseEffect(()=>{populateRaceSelector();},[]);// Fetch race results when round changes\nuseEffect(()=>{if(selectedRound){fetchRaceResults(selectedRound);}},[selectedRound]);const populateRaceSelector=async()=>{try{const response=await fetch('https://api.jolpi.ca/ergast/f1/2024');if(response.ok){var _data$MRData,_data$MRData$RaceTabl;const data=await response.json();const races=((_data$MRData=data.MRData)===null||_data$MRData===void 0?void 0:(_data$MRData$RaceTabl=_data$MRData.RaceTable)===null||_data$MRData$RaceTabl===void 0?void 0:_data$MRData$RaceTabl.Races)||[];setRacesList(races);}}catch(err){console.error('Failed to load races list:',err);}};const fetchRaceResults=async function(){let round=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'last';setLoading(true);setError(null);try{console.log(\"\\uD83C\\uDFCE\\uFE0F Fetching race results for round \".concat(round,\"...\"));const response=await fetch(\"https://api.jolpi.ca/ergast/f1/2024/\".concat(round,\"/results\"));if(response.ok){var _data$MRData2,_data$MRData2$RaceTab;const data=await response.json();if((_data$MRData2=data.MRData)!==null&&_data$MRData2!==void 0&&(_data$MRData2$RaceTab=_data$MRData2.RaceTable)!==null&&_data$MRData2$RaceTab!==void 0&&_data$MRData2$RaceTab.Races&&data.MRData.RaceTable.Races.length>0){console.log('✅ Race results loaded!');const results=data.MRData.RaceTable.Races[0];setRaceData(results);// Also fetch fastest laps and pit stops\nfetchFastestLaps(round);fetchPitStops(round);}else{setError('No race results found');}}else{setError('Failed to fetch race results');}}catch(err){console.error('❌ Failed to load race results:',err);setError('Unable to load race results. Please try again later.');}finally{setLoading(false);}};const fetchFastestLaps=async round=>{try{const response=await fetch(\"https://api.jolpi.ca/ergast/f1/2024/\".concat(round,\"/results\"));if(response.ok){var _data$MRData3,_data$MRData3$RaceTab,_data$MRData3$RaceTab2;const data=await response.json();const race=(_data$MRData3=data.MRData)===null||_data$MRData3===void 0?void 0:(_data$MRData3$RaceTab=_data$MRData3.RaceTable)===null||_data$MRData3$RaceTab===void 0?void 0:(_data$MRData3$RaceTab2=_data$MRData3$RaceTab.Races)===null||_data$MRData3$RaceTab2===void 0?void 0:_data$MRData3$RaceTab2[0];if(race!==null&&race!==void 0&&race.Results){// Filter and sort by fastest lap time\nconst lapsWithTime=race.Results.filter(r=>{var _r$FastestLap;return(_r$FastestLap=r.FastestLap)===null||_r$FastestLap===void 0?void 0:_r$FastestLap.Time;}).map(r=>({Driver:r.Driver,Constructor:r.Constructor,Time:r.FastestLap.Time})).sort((a,b)=>{const timeA=convertLapTimeToSeconds(a.Time.time);const timeB=convertLapTimeToSeconds(b.Time.time);return timeA-timeB;}).slice(0,6);// Top 6\nsetFastestLaps(lapsWithTime);}}}catch(err){console.error('Failed to load fastest laps:',err);}};const fetchPitStops=async round=>{try{const response=await fetch(\"https://api.jolpi.ca/ergast/f1/2024/\".concat(round,\"/pitstops\"));if(response.ok){var _data$MRData4,_data$MRData4$RaceTab,_data$MRData4$RaceTab2,_data$MRData4$RaceTab3;const data=await response.json();const stops=((_data$MRData4=data.MRData)===null||_data$MRData4===void 0?void 0:(_data$MRData4$RaceTab=_data$MRData4.RaceTable)===null||_data$MRData4$RaceTab===void 0?void 0:(_data$MRData4$RaceTab2=_data$MRData4$RaceTab.Races)===null||_data$MRData4$RaceTab2===void 0?void 0:(_data$MRData4$RaceTab3=_data$MRData4$RaceTab2[0])===null||_data$MRData4$RaceTab3===void 0?void 0:_data$MRData4$RaceTab3.PitStops)||[];setPitStops(stops);}}catch(err){console.error('Failed to load pit stops:',err);}};const convertLapTimeToSeconds=timeStr=>{const parts=timeStr.split(':');const minutes=parseInt(parts[0]||'0');const seconds=parseFloat(parts[1]||'0');return minutes*60+seconds;};const getDriverAvatar=driver=>{const driverId=driver.driverId;const officialUrl=\"https://media.formula1.com/d_driver_fallback_image.png/content/dam/fom-website/drivers/\".concat(new Date().getFullYear(),\"Drivers/\").concat(driverId,\".png.transform/1col/image.png\");const fallbackUrl=\"https://ui-avatars.com/api/?name=\".concat(driver.givenName,\"+\").concat(driver.familyName,\"&size=80&background=e10600&color=fff&bold=true&font-size=0.4\");return/*#__PURE__*/_jsx(\"img\",{src:officialUrl,alt:driver.familyName,className:\"driver-avatar\",onError:e=>{e.target.src=fallbackUrl;}});};const calculatePitStopStats=()=>{if(pitStops.length===0)return null;// Find fastest pit stop\nconst fastestStop=pitStops.reduce((fastest,stop)=>{const currentDuration=parseFloat(stop.duration);const fastestDuration=parseFloat(fastest.duration);return currentDuration<fastestDuration?stop:fastest;});// Calculate average\nconst totalDuration=pitStops.reduce((sum,stop)=>sum+parseFloat(stop.duration),0);const avgDuration=(totalDuration/pitStops.length).toFixed(3);// Count total stops\nconst totalStops=pitStops.length;return{fastestStop,avgDuration,totalStops};};if(loading){return/*#__PURE__*/_jsx(\"div\",{className:\"race-results-page\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"loading-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"loading-spinner\"}),/*#__PURE__*/_jsx(\"h2\",{children:\"Loading Race Results...\"})]})});}if(error&&!raceData){return/*#__PURE__*/_jsx(\"div\",{className:\"race-results-page\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"error-container\",children:[/*#__PURE__*/_jsxs(\"h2\",{children:[\"\\u274C \",error]}),/*#__PURE__*/_jsx(\"button\",{className:\"retry-btn\",onClick:()=>fetchRaceResults(selectedRound),children:\"\\uD83D\\uDD04 Retry\"})]})});}const pitStopStats=calculatePitStopStats();return/*#__PURE__*/_jsxs(\"div\",{className:\"race-results-page\",children:[/*#__PURE__*/_jsxs(\"section\",{className:\"results-hero\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"hero-background\",children:/*#__PURE__*/_jsx(\"div\",{className:\"hero-grid\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"hero-content\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"animated-badge\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"badge-icon\",children:\"\\uD83C\\uDFC1\"}),/*#__PURE__*/_jsx(\"span\",{children:\"LIVE RACE RESULTS\"})]}),/*#__PURE__*/_jsx(\"h1\",{className:\"hero-title\",children:\"RACE RESULTS 2024\"}),raceData&&/*#__PURE__*/_jsxs(\"div\",{className:\"race-info\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"info-item\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"\\uD83C\\uDFCE\\uFE0F\"}),/*#__PURE__*/_jsx(\"span\",{children:raceData.raceName})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"info-item\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"\\uD83D\\uDCCD\"}),/*#__PURE__*/_jsx(\"span\",{children:raceData.Circuit.circuitName})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"info-item\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"\\uD83D\\uDCC5\"}),/*#__PURE__*/_jsx(\"span\",{children:new Date(raceData.date).toLocaleDateString()})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"race-selector-inline\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"selector-label\",children:\"SELECT A RACE\"}),/*#__PURE__*/_jsxs(\"select\",{className:\"race-selector\",value:selectedRound,onChange:e=>setSelectedRound(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"last\",children:\"Latest Race\"}),racesList.map(race=>/*#__PURE__*/_jsxs(\"option\",{value:race.round,children:[\"Round \",race.round,\" - \",race.raceName]},race.round))]})]})]})]}),raceData&&/*#__PURE__*/_jsx(\"section\",{className:\"classification-section\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"glass-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"section-title-pro\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"title-icon\",children:\"\\uD83C\\uDFC6\"}),/*#__PURE__*/_jsx(\"span\",{className:\"title-text\",children:\"FULL CLASSIFICATION\"}),/*#__PURE__*/_jsx(\"span\",{className:\"title-line\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"results-table-container\",children:/*#__PURE__*/_jsxs(\"table\",{className:\"results-table\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{className:\"result-pos\",children:\"POS\"}),/*#__PURE__*/_jsx(\"th\",{className:\"result-driver\",children:\"DRIVER\"}),/*#__PURE__*/_jsx(\"th\",{className:\"result-team\",children:\"TEAM\"}),/*#__PURE__*/_jsx(\"th\",{className:\"result-time\",children:\"TIME/STATUS\"}),/*#__PURE__*/_jsx(\"th\",{className:\"result-points\",children:\"PTS\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:raceData.Results.slice(0,10).map((result,index)=>{var _result$FastestLap;const hasFastestLap=((_result$FastestLap=result.FastestLap)===null||_result$FastestLap===void 0?void 0:_result$FastestLap.rank)==='1';const isPodium=index<3;const medals=['🥇','🥈','🥉'];return/*#__PURE__*/_jsxs(\"tr\",{className:\"result-row \".concat(isPodium?'podium':''),children:[/*#__PURE__*/_jsx(\"td\",{className:\"result-pos\",children:/*#__PURE__*/_jsx(\"div\",{className:\"position-number \".concat(isPodium?'podium':''),children:isPodium?medals[index]:result.position})}),/*#__PURE__*/_jsx(\"td\",{className:\"result-driver\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"result-driver\",children:[getDriverAvatar(result.Driver),/*#__PURE__*/_jsxs(\"div\",{className:\"driver-name\",children:[result.Driver.givenName,\" \",result.Driver.familyName,hasFastestLap&&/*#__PURE__*/_jsx(\"span\",{className:\"fastest-lap-badge\",children:\"\\u26A1\"})]})]})}),/*#__PURE__*/_jsx(\"td\",{className:\"result-team\",children:result.Constructor.name}),/*#__PURE__*/_jsx(\"td\",{className:\"result-time\",children:result.Time?result.Time.time:result.status}),/*#__PURE__*/_jsx(\"td\",{className:\"result-points\",children:result.points})]},result.position);})})]})})]})}),fastestLaps.length>0&&/*#__PURE__*/_jsxs(\"section\",{className:\"fastest-laps-section-pro\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"section-title-pro\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"title-icon\",children:\"\\u26A1\"}),/*#__PURE__*/_jsx(\"span\",{className:\"title-text\",children:\"FASTEST LAPS\"}),/*#__PURE__*/_jsx(\"span\",{className:\"title-line purple\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"laps-grid\",children:fastestLaps.map((lap,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"lap-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"lap-rank\",children:index+1}),/*#__PURE__*/_jsxs(\"div\",{className:\"lap-driver\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"lap-driver-name\",children:[lap.Driver.givenName,\" \",lap.Driver.familyName]}),/*#__PURE__*/_jsx(\"div\",{className:\"lap-team\",children:lap.Constructor.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"lap-time\",style:{fontSize:'1.8rem',fontFamily:'var(--font-display)',color:'#8b5cf6',marginTop:'1rem',fontWeight:700},children:[\"\\u23F1\\uFE0F \",lap.Time.time]})]})]},index))})]}),pitStopStats&&/*#__PURE__*/_jsxs(\"section\",{className:\"pitstops-section-pro\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"section-title-pro\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"title-icon\",children:\"\\uD83D\\uDD27\"}),/*#__PURE__*/_jsx(\"span\",{className:\"title-text\",children:\"PIT STOP ANALYTICS\"}),/*#__PURE__*/_jsx(\"span\",{className:\"title-line gold\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"pitstops-grid\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"pitstop-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"pitstop-icon\",children:\"\\u26A1\"}),/*#__PURE__*/_jsx(\"div\",{className:\"pitstop-label\",children:\"Fastest Stop\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"pitstop-value\",children:[pitStopStats.fastestStop.duration,\"s\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"pitstop-team\",style:{color:'var(--gray-400)',marginTop:'0.5rem'},children:[\"Lap \",pitStopStats.fastestStop.lap]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"pitstop-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"pitstop-icon\",children:\"\\uD83D\\uDCCA\"}),/*#__PURE__*/_jsx(\"div\",{className:\"pitstop-label\",children:\"Average Stop\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"pitstop-value\",children:[pitStopStats.avgDuration,\"s\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"pitstop-card\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"pitstop-icon\",children:\"\\uD83D\\uDD22\"}),/*#__PURE__*/_jsx(\"div\",{className:\"pitstop-label\",children:\"Total Pit Stops\"}),/*#__PURE__*/_jsx(\"div\",{className:\"pitstop-value\",children:pitStopStats.totalStops})]})]})]})]});};export default RaceResults;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","RaceResults","raceData","setRaceData","loading","setLoading","error","setError","racesList","setRacesList","selectedRound","setSelectedRound","fastestLaps","setFastestLaps","pitStops","setPitStops","populateRaceSelector","fetchRaceResults","response","fetch","ok","_data$MRData","_data$MRData$RaceTabl","data","json","races","MRData","RaceTable","Races","err","console","round","arguments","length","undefined","log","concat","_data$MRData2","_data$MRData2$RaceTab","results","fetchFastestLaps","fetchPitStops","_data$MRData3","_data$MRData3$RaceTab","_data$MRData3$RaceTab2","race","Results","lapsWithTime","filter","r","_r$FastestLap","FastestLap","Time","map","Driver","Constructor","sort","a","b","timeA","convertLapTimeToSeconds","time","timeB","slice","_data$MRData4","_data$MRData4$RaceTab","_data$MRData4$RaceTab2","_data$MRData4$RaceTab3","stops","PitStops","timeStr","parts","split","minutes","parseInt","seconds","parseFloat","getDriverAvatar","driver","driverId","officialUrl","Date","getFullYear","fallbackUrl","givenName","familyName","src","alt","className","onError","e","target","calculatePitStopStats","fastestStop","reduce","fastest","stop","currentDuration","duration","fastestDuration","totalDuration","sum","avgDuration","toFixed","totalStops","children","onClick","pitStopStats","raceName","Circuit","circuitName","date","toLocaleDateString","value","onChange","result","index","_result$FastestLap","hasFastestLap","rank","isPodium","medals","position","name","status","points","lap","style","fontSize","fontFamily","color","marginTop","fontWeight"],"sources":["D:/F1Demo (2)/NewProject/f1-pitwall-react/src/pages/RaceResults.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './RaceResults.css';\r\n\r\ninterface Driver {\r\n  driverId: string;\r\n  givenName: string;\r\n  familyName: string;\r\n}\r\n\r\ninterface Constructor {\r\n  name: string;\r\n  constructorId: string;\r\n}\r\n\r\ninterface Time {\r\n  time: string;\r\n}\r\n\r\ninterface FastestLap {\r\n  rank: string;\r\n  Time: Time;\r\n}\r\n\r\ninterface Result {\r\n  position: string;\r\n  Driver: Driver;\r\n  Constructor: Constructor;\r\n  Time?: Time;\r\n  status: string;\r\n  points: string;\r\n  FastestLap?: FastestLap;\r\n}\r\n\r\ninterface Circuit {\r\n  circuitName: string;\r\n  Location: {\r\n    locality: string;\r\n    country: string;\r\n  };\r\n}\r\n\r\ninterface Race {\r\n  round: string;\r\n  raceName: string;\r\n  date: string;\r\n  time: string;\r\n  Circuit: Circuit;\r\n  Results: Result[];\r\n}\r\n\r\ninterface RaceListItem {\r\n  round: string;\r\n  raceName: string;\r\n  date: string;\r\n}\r\n\r\ninterface LapData {\r\n  Driver: Driver;\r\n  Constructor: Constructor;\r\n  Time: Time;\r\n}\r\n\r\ninterface PitStop {\r\n  driverId: string;\r\n  lap: string;\r\n  stop: string;\r\n  time: string;\r\n  duration: string;\r\n}\r\n\r\nconst RaceResults: React.FC = () => {\r\n  const [raceData, setRaceData] = useState<Race | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [racesList, setRacesList] = useState<RaceListItem[]>([]);\r\n  const [selectedRound, setSelectedRound] = useState<string>('last');\r\n  const [fastestLaps, setFastestLaps] = useState<LapData[]>([]);\r\n  const [pitStops, setPitStops] = useState<PitStop[]>([]);\r\n\r\n  // Fetch all races for selector\r\n  useEffect(() => {\r\n    populateRaceSelector();\r\n  }, []);\r\n\r\n  // Fetch race results when round changes\r\n  useEffect(() => {\r\n    if (selectedRound) {\r\n      fetchRaceResults(selectedRound);\r\n    }\r\n  }, [selectedRound]);\r\n\r\n  const populateRaceSelector = async () => {\r\n    try {\r\n      const response = await fetch('https://api.jolpi.ca/ergast/f1/2024');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const races = data.MRData?.RaceTable?.Races || [];\r\n        setRacesList(races);\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to load races list:', err);\r\n    }\r\n  };\r\n\r\n  const fetchRaceResults = async (round: string = 'last') => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      console.log(`🏎️ Fetching race results for round ${round}...`);\r\n      const response = await fetch(`https://api.jolpi.ca/ergast/f1/2024/${round}/results`);\r\n\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        if (data.MRData?.RaceTable?.Races && data.MRData.RaceTable.Races.length > 0) {\r\n          console.log('✅ Race results loaded!');\r\n          const results = data.MRData.RaceTable.Races[0];\r\n          setRaceData(results);\r\n\r\n          // Also fetch fastest laps and pit stops\r\n          fetchFastestLaps(round);\r\n          fetchPitStops(round);\r\n        } else {\r\n          setError('No race results found');\r\n        }\r\n      } else {\r\n        setError('Failed to fetch race results');\r\n      }\r\n    } catch (err) {\r\n      console.error('❌ Failed to load race results:', err);\r\n      setError('Unable to load race results. Please try again later.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchFastestLaps = async (round: string) => {\r\n    try {\r\n      const response = await fetch(`https://api.jolpi.ca/ergast/f1/2024/${round}/results`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const race = data.MRData?.RaceTable?.Races?.[0];\r\n        \r\n        if (race?.Results) {\r\n          // Filter and sort by fastest lap time\r\n          const lapsWithTime = race.Results\r\n            .filter((r: Result) => r.FastestLap?.Time)\r\n            .map((r: Result) => ({\r\n              Driver: r.Driver,\r\n              Constructor: r.Constructor,\r\n              Time: r.FastestLap!.Time\r\n            }))\r\n            .sort((a: LapData, b: LapData) => {\r\n              const timeA = convertLapTimeToSeconds(a.Time.time);\r\n              const timeB = convertLapTimeToSeconds(b.Time.time);\r\n              return timeA - timeB;\r\n            })\r\n            .slice(0, 6); // Top 6\r\n          \r\n          setFastestLaps(lapsWithTime);\r\n        }\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to load fastest laps:', err);\r\n    }\r\n  };\r\n\r\n  const fetchPitStops = async (round: string) => {\r\n    try {\r\n      const response = await fetch(`https://api.jolpi.ca/ergast/f1/2024/${round}/pitstops`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const stops = data.MRData?.RaceTable?.Races?.[0]?.PitStops || [];\r\n        setPitStops(stops);\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to load pit stops:', err);\r\n    }\r\n  };\r\n\r\n  const convertLapTimeToSeconds = (timeStr: string): number => {\r\n    const parts = timeStr.split(':');\r\n    const minutes = parseInt(parts[0] || '0');\r\n    const seconds = parseFloat(parts[1] || '0');\r\n    return minutes * 60 + seconds;\r\n  };\r\n\r\n  const getDriverAvatar = (driver: Driver) => {\r\n    const driverId = driver.driverId;\r\n    const officialUrl = `https://media.formula1.com/d_driver_fallback_image.png/content/dam/fom-website/drivers/${new Date().getFullYear()}Drivers/${driverId}.png.transform/1col/image.png`;\r\n    const fallbackUrl = `https://ui-avatars.com/api/?name=${driver.givenName}+${driver.familyName}&size=80&background=e10600&color=fff&bold=true&font-size=0.4`;\r\n    \r\n    return (\r\n      <img \r\n        src={officialUrl}\r\n        alt={driver.familyName}\r\n        className=\"driver-avatar\"\r\n        onError={(e) => {\r\n          (e.target as HTMLImageElement).src = fallbackUrl;\r\n        }}\r\n      />\r\n    );\r\n  };\r\n\r\n  const calculatePitStopStats = () => {\r\n    if (pitStops.length === 0) return null;\r\n\r\n    // Find fastest pit stop\r\n    const fastestStop = pitStops.reduce((fastest, stop) => {\r\n      const currentDuration = parseFloat(stop.duration);\r\n      const fastestDuration = parseFloat(fastest.duration);\r\n      return currentDuration < fastestDuration ? stop : fastest;\r\n    });\r\n\r\n    // Calculate average\r\n    const totalDuration = pitStops.reduce((sum, stop) => sum + parseFloat(stop.duration), 0);\r\n    const avgDuration = (totalDuration / pitStops.length).toFixed(3);\r\n\r\n    // Count total stops\r\n    const totalStops = pitStops.length;\r\n\r\n    return { fastestStop, avgDuration, totalStops };\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"race-results-page\">\r\n        <div className=\"loading-container\">\r\n          <div className=\"loading-spinner\"></div>\r\n          <h2>Loading Race Results...</h2>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error && !raceData) {\r\n    return (\r\n      <div className=\"race-results-page\">\r\n        <div className=\"error-container\">\r\n          <h2>❌ {error}</h2>\r\n          <button className=\"retry-btn\" onClick={() => fetchRaceResults(selectedRound)}>\r\n            🔄 Retry\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const pitStopStats = calculatePitStopStats();\r\n\r\n  return (\r\n    <div className=\"race-results-page\">\r\n      {/* Hero Section with Race Selector */}\r\n      <section className=\"results-hero\">\r\n        <div className=\"hero-background\">\r\n          <div className=\"hero-grid\"></div>\r\n        </div>\r\n        <div className=\"hero-content\">\r\n          <div className=\"animated-badge\">\r\n            <span className=\"badge-icon\">🏁</span>\r\n            <span>LIVE RACE RESULTS</span>\r\n          </div>\r\n          <h1 className=\"hero-title\">RACE RESULTS 2024</h1>\r\n          \r\n          {raceData && (\r\n            <div className=\"race-info\">\r\n              <div className=\"info-item\">\r\n                <span>🏎️</span>\r\n                <span>{raceData.raceName}</span>\r\n              </div>\r\n              <div className=\"info-item\">\r\n                <span>📍</span>\r\n                <span>{raceData.Circuit.circuitName}</span>\r\n              </div>\r\n              <div className=\"info-item\">\r\n                <span>📅</span>\r\n                <span>{new Date(raceData.date).toLocaleDateString()}</span>\r\n              </div>\r\n            </div>\r\n          )}\r\n\r\n          {/* Race Selector */}\r\n          <div className=\"race-selector-inline\">\r\n            <label className=\"selector-label\">SELECT A RACE</label>\r\n            <select \r\n              className=\"race-selector\"\r\n              value={selectedRound}\r\n              onChange={(e) => setSelectedRound(e.target.value)}\r\n            >\r\n              <option value=\"last\">Latest Race</option>\r\n              {racesList.map((race) => (\r\n                <option key={race.round} value={race.round}>\r\n                  Round {race.round} - {race.raceName}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </section>\r\n\r\n      {/* Classification Section */}\r\n      {raceData && (\r\n        <section className=\"classification-section\">\r\n          <div className=\"glass-container\">\r\n            <div className=\"section-title-pro\">\r\n              <span className=\"title-icon\">🏆</span>\r\n              <span className=\"title-text\">FULL CLASSIFICATION</span>\r\n              <span className=\"title-line\"></span>\r\n            </div>\r\n\r\n            <div className=\"results-table-container\">\r\n              <table className=\"results-table\">\r\n                <thead>\r\n                  <tr>\r\n                    <th className=\"result-pos\">POS</th>\r\n                    <th className=\"result-driver\">DRIVER</th>\r\n                    <th className=\"result-team\">TEAM</th>\r\n                    <th className=\"result-time\">TIME/STATUS</th>\r\n                    <th className=\"result-points\">PTS</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {raceData.Results.slice(0, 10).map((result, index) => {\r\n                    const hasFastestLap = result.FastestLap?.rank === '1';\r\n                    const isPodium = index < 3;\r\n                    const medals = ['🥇', '🥈', '🥉'];\r\n\r\n                    return (\r\n                      <tr key={result.position} className={`result-row ${isPodium ? 'podium' : ''}`}>\r\n                        <td className=\"result-pos\">\r\n                          <div className={`position-number ${isPodium ? 'podium' : ''}`}>\r\n                            {isPodium ? medals[index] : result.position}\r\n                          </div>\r\n                        </td>\r\n                        <td className=\"result-driver\">\r\n                          <div className=\"result-driver\">\r\n                            {getDriverAvatar(result.Driver)}\r\n                            <div className=\"driver-name\">\r\n                              {result.Driver.givenName} {result.Driver.familyName}\r\n                              {hasFastestLap && <span className=\"fastest-lap-badge\">⚡</span>}\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                        <td className=\"result-team\">{result.Constructor.name}</td>\r\n                        <td className=\"result-time\">{result.Time ? result.Time.time : result.status}</td>\r\n                        <td className=\"result-points\">{result.points}</td>\r\n                      </tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      )}\r\n\r\n      {/* Fastest Laps Section */}\r\n      {fastestLaps.length > 0 && (\r\n        <section className=\"fastest-laps-section-pro\">\r\n          <div className=\"section-title-pro\">\r\n            <span className=\"title-icon\">⚡</span>\r\n            <span className=\"title-text\">FASTEST LAPS</span>\r\n            <span className=\"title-line purple\"></span>\r\n          </div>\r\n\r\n          <div className=\"laps-grid\">\r\n            {fastestLaps.map((lap, index) => (\r\n              <div key={index} className=\"lap-card\">\r\n                <div className=\"lap-rank\">{index + 1}</div>\r\n                <div className=\"lap-driver\">\r\n                  <div className=\"lap-driver-name\">\r\n                    {lap.Driver.givenName} {lap.Driver.familyName}\r\n                  </div>\r\n                  <div className=\"lap-team\">{lap.Constructor.name}</div>\r\n                  <div className=\"lap-time\" style={{\r\n                    fontSize: '1.8rem',\r\n                    fontFamily: 'var(--font-display)',\r\n                    color: '#8b5cf6',\r\n                    marginTop: '1rem',\r\n                    fontWeight: 700\r\n                  }}>\r\n                    ⏱️ {lap.Time.time}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </section>\r\n      )}\r\n\r\n      {/* Pit Stops Section */}\r\n      {pitStopStats && (\r\n        <section className=\"pitstops-section-pro\">\r\n          <div className=\"section-title-pro\">\r\n            <span className=\"title-icon\">🔧</span>\r\n            <span className=\"title-text\">PIT STOP ANALYTICS</span>\r\n            <span className=\"title-line gold\"></span>\r\n          </div>\r\n\r\n          <div className=\"pitstops-grid\">\r\n            <div className=\"pitstop-card\">\r\n              <div className=\"pitstop-icon\">⚡</div>\r\n              <div className=\"pitstop-label\">Fastest Stop</div>\r\n              <div className=\"pitstop-value\">{pitStopStats.fastestStop.duration}s</div>\r\n              <div className=\"pitstop-team\" style={{ color: 'var(--gray-400)', marginTop: '0.5rem' }}>\r\n                Lap {pitStopStats.fastestStop.lap}\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"pitstop-card\">\r\n              <div className=\"pitstop-icon\">📊</div>\r\n              <div className=\"pitstop-label\">Average Stop</div>\r\n              <div className=\"pitstop-value\">{pitStopStats.avgDuration}s</div>\r\n            </div>\r\n\r\n            <div className=\"pitstop-card\">\r\n              <div className=\"pitstop-icon\">🔢</div>\r\n              <div className=\"pitstop-label\">Total Pit Stops</div>\r\n              <div className=\"pitstop-value\">{pitStopStats.totalStops}</div>\r\n            </div>\r\n          </div>\r\n        </section>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RaceResults;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}